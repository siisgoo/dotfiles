#!/bin/bash
#Requered:
#1. feh (wallpaper setup)
#2. dmenu (input text)
#3. base, linux-utils, bash
#4. gawk
#5. sed
#6. findutils

__dbdb()
{
	getlinkdir()
	{
		while read line; do
			if [[ -d "$(realpath "${line}")" ]]; then
				printf "$(basename "${line}")/\n"
			fi
		done <<< $(find "$(pwd)" -maxdepth 1 -type l)
	}

	cd $(tail -n1 "${dstf}")

	chosen="placeholder"
	lines=10

	while [ ! -z "$chosen" ]; do
		DIRs=$( ls -a1p | grep -P '^\w[^\$/]+/$' | awk -vRS="\n" -vORS="\t" '1')
		LinkDIRs=$(getlinkdir)
		prompt=$(_cut "$(pwd)" 20)
		chosen=$(echo -e "$DIRs$LinkDIRs" | awk -vRS="\t" -vORS="\n" '1' | dmenu -l ${lines} -p ${prompt})
		cd "$chosen"
	done

	echo "$(pwd)"
}

# setting wallpaper with feh, ${1} arg - monitor number
wall_set_depr() { #bad at setting background for the first time
	swap=$(mktemp)
	#single quote handling
	file=$(sed 's/'\''/'\''\\\\'\'''\''/g' <<< $file)

	if [ ! -f ~/.fehbg ]; then
		echo -e '#!/bin/sh\nfeh --bg-fill '\''one'\'' '\''two'\''' > ~/.fehbg
	fi

	awk -v insert="$file" -v monitore=$(( $1 * 2 )) -F \'*\' \
		'BEGIN	{ static=2/(monitore/4) }
		{
			if ( $0 ~ /feh/ ) {
				{ $monitore="\x27" insert "\x27" }
				{ $static="\x27" $static"\x27" }
				{ print }
			} else
				{ print }
		}' ~/.fehbg > $swap

	chmod 744 $swap
	mv $swap ~/.fehbg
	~/./.fehbg 2>/dev/null
}

wall_set() {
	local opt="--no-fehbg --bg-fill"

	create_fehbg()
	{
		printf "#!/bin/sh\nfeh $opt 'one' 'two'" # > ~/.fehbg
		exit
		if (( ! $? )); then
			echo "Cant create fehbg file"
			return -1
		fi

		return 0
	}

	set()
	{
		if (( $(countchar \' <<< $(awk '! /^feh/ {next} { print $0 }' ~/.fehbg)) != 4 )); then
			create_fehbg
			if (( $? != 0 )); then
				return
			fi
		fi

		local save_sect=$(( (3 - $mon) * 2 ))
		local save="$(awk -v n="$save_sect" -F \'*\' \
			'! /^feh/ {next} { print $n }' ~/.fehbg)"

		# same files for prim and second monitors
		if [[ -z "$save" ]]; then
			save="$file"
		fi

		if [[ -n $1 ]]; then
			feh ${opt} "$file"
			return
		elif (( $mon == 1 )); then
			str="feh ${opt} '$file' '$save'"
		elif (( $mon == 2 )); then
			str="feh ${opt} '$save' '$file'"
		fi

		echo "$str" > ~/.fehbg
		~/./.fehbg

		return
	}

	local mon=$1

	#single quote handling
	local file=$(sed 's/'\''/'\''\\\\'\'''\''/g' <<< $file)

	if (( $mon < 0 )) || (( $mon > $max_mon )); then
		echo "Selected monitor not in range 0-$mon"
		return
	fi

	if [[ $1 == 0 ]]; then
		write=0
	fi
	
	if [[ ! -f ~/.fehbg ]]; then
		create_fehbg
		if (( $? != 0 )); then
			return
		fi
	fi
	
	set $write
}

source "$(dirname "${0}")/env"

exec 2>>${LOG_FILE}

while read file; do
	file="$(readlink -f "${file}")"

	case "$1" in
	"C-s") #set background to first monitor
		wall_set 0
		;;
	"C-S")
		cp "${file}" "${WALLPAPER_STORE}/primary"
		file="$WALLPAPER_STORE/primary"

		wall_set 1
		;;
	"C-c") #copy path of current displayed file to clipboard
		echo -n "${file}" | xclip -selection clipboard
		;;
	"C-d") #move current image to trash and push it's name to stack
		control_size $undo_stack $MAX_UNDO

		# mv "${file}" "${trash_dir}/$(basename "$file")" # without trash-cli
		trash-put "${file}"

		echo "${file}" >> ${undo_stack}

		rm -f ${undo_stack}.1
		;;
	"C-u") #move back the last deleted file
		file="$(tail -n1 $undo_stack)"
		mv "$trash_dir/$(basename "$file")" "$file"

		if [[ $? -eq 0 ]]; then
			cp $undo_stack ${undo_stack}.1
			sed '$ d' ${undo_stack}.1 > $undo_stack

			rm -f ${undo_stack}.1
		fi
		;;
	"C-r") #rename current file
		filename=$(_cut "$file" "$(( ${w} - 24 ))")
		text="$filename to"

		#TODO: rewrtie with dmenu
		mv "$file" "$(dirname "$file")/$(Xdialog ${dialog_opts} --inputbox "$text" $h $w "$(basename "$file")")"
		;;
	"C-t") #change destination directory
		control_size $dstf $MAX_DST

		dir="$(tail -n1 $dstf)"
		[[ -d "$dir" ]] && text="$dir" || text="$dst_default"
		dir=$(__dbdb)
		(( $? == 0 )) && echo $dir >> $dstf
		;;
	"C-T") #switch last dst directory
		control_size $dstf $MAX_DST

		prev=$(tail -n2 $dstf | head -n1)

		echo "${prev}" >> "${dstf}"
		;;
	"C-m") #move current file to directory indicated by first line in $dstf or $dst_default if it's not declared
		dst="$(tail -n1 $dstf)"
		[ -z "$dst" ] && dst="$dst_default"
		[[ ! -d "$dst" ]] && mkdir "$dst"
		mv "$file" "$dst"/ 
		;;
	"C-C")
		dst="$(tail -n1 $dstf)"

		[[ ! -d "$dst" ]] && mkdir "$dst"

		cp "$file" "$dst"/ 
		;;
	"C-p") # play in mpv
		base=$(basename "${file%.*}")
		dir=$(dirname "$(dirname "${file}")")

		mpv "${dir}/${base}"
		;;
	esac
done
